generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id                Int      @id @default(autoincrement())
  created_time      DateTime @default(now())
  email             String   @unique
  first_name        String?
  last_name         String?
  gender            String?
  profile_image_url String?
  user_id           String   @unique
  
  // Связи
  portfolios        user_portfolio[]
  transactions      crypto_transaction[]
  subscriptions     subscriptions[] // Добавляем связь с подписками
  
  @@index([user_id])
}


model payments {
  id               Int      @id @default(autoincrement())
  created_time     DateTime @default(now())
  stripe_id        String
  email            String
  amount           String
  payment_time     String
  payment_date     String
  currency         String
  user_id          String
  customer_details String
  payment_intent   String
}


model subscriptions {
  id                        Int      @id @default(autoincrement())
  created_time              DateTime @default(now())
  subscription_id           String   @unique
  stripe_user_id            String
  status                    String
  start_date                String
  end_date                  String?
  plan_id                   String
  default_payment_method_id String?
  email                     String
  user_id                   String

  // Связи
  user user @relation(fields: [user_id], references: [user_id])
  plan subscriptions_plans @relation(fields: [plan_id], references: [plan_id])
  
  @@index([user_id])
  @@index([plan_id])
}



model subscriptions_plans {
  id           Int      @id @default(autoincrement())
  created_time DateTime @default(now())
  plan_id      String   @unique
  name         String
  description  String
  amount       String
  currency     String
  interval     String

  // Обратная связь
  subscriptions subscriptions[]
}

model invoices {
  id              Int      @id @default(autoincrement())
  created_time    DateTime @default(now())
  invoice_id      String
  subscription_id String
  amount_paid     String
  amount_due      String?
  currency        String
  status          String
  email           String
  user_id         String?
}

enum PortfolioType {
  SPOT
  MARGIN
}

enum TransactionType {
  BUY
  SELL
  MARGIN_BUY
  MARGIN_SELL
  TRANSFER
}

model user_portfolio {
  id              Int           @id @default(autoincrement())
  created_time    DateTime      @default(now())
  user_id         String
  name            String        
  description     String?       
  type            PortfolioType 
  is_active       Boolean       @default(true)
  
  user            user                  @relation(fields: [user_id], references: [user_id])
  transactions    crypto_transaction[]
  balances        portfolio_balance[]
  history         portfolio_history[]

  @@unique([user_id, name])
  @@index([user_id])
}

model crypto_transaction {
  id               Int             @id @default(autoincrement())
  created_time     DateTime        @default(now())
  transaction_time DateTime
  portfolio_id     Int             
  user_id          String
  type             TransactionType
  
  // Базовые поля для всех типов транзакций
  coin_name        String
  coin_ticker      String
  amount           Float           // Количество монет в транзакции
  notes            String?

  // Поля для BUY/SELL
  payment_method   String?         // USDT, USDC, BTC и т.д.
  payment_price    Float?          // Цена в валюте оплаты
  payment_total    Float?          // Общая сумма в валюте оплаты
  price_usd        Float?          // Цена в USD на момент транзакции
  total_usd        Float?          // Общая сумма в USD
  borrowed_amount  Float?          // Количество заемных монет (для шорта или маржинальной торговли)
  
  // Поля для TRANSFER
  target_portfolio_id Int?         // Только для TRANSFER

  // Связи
  portfolio       user_portfolio   @relation(fields: [portfolio_id], references: [id])
  user            user            @relation(fields: [user_id], references: [user_id])

  @@index([portfolio_id, coin_ticker])
  @@index([user_id])
  @@index([transaction_time])
}

model portfolio_balance {
  id              Int           @id @default(autoincrement())
  last_updated    DateTime      @default(now())
  portfolio_id    Int
  coin_ticker     String
  amount          Float         @default(0)
  borrowed        Float         @default(0)
  in_collateral   Float         @default(0)

  portfolio       user_portfolio @relation(fields: [portfolio_id], references: [id])

  @@unique([portfolio_id, coin_ticker])
  @@index([portfolio_id])
}

// Таблица для хранения метаданных криптовалют
model crypto_metadata {
  id              Int       @id @default(autoincrement())
  coin_id         String    @unique // bitcoin, ethereum и т.д.
  symbol          String    // BTC, ETH и т.д.
  name            String    // Bitcoin, Ethereum и т.д.
  logo            String?   // URL логотипа
  market_cap_rank Int?
  current_price   Float?
  price_change_24h Float?
  ath             Float?
  ath_date        DateTime?
  last_updated    DateTime  @default(now())

  @@index([symbol])
}

// Таблица для хранения истории стоимости портфелей
model portfolio_history {
  id            Int      @id @default(autoincrement())
  portfolio_id  Int
  total_value   Float
  timestamp     DateTime @default(now())
  period        Period   // Enum с периодами
  
  portfolio     user_portfolio @relation(fields: [portfolio_id], references: [id])

  @@unique([portfolio_id, period, timestamp])
  @@index([portfolio_id, timestamp])
}

enum Period {
  MINUTE_15  // Каждые 15 минут
  HOUR_1     // Каждый час
  HOUR_4     // Каждые 4 часа
  HOUR_24    // Каждые 24 часа
}