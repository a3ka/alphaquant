generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id                 Int                  @id @default(autoincrement())
  created_time       DateTime             @default(now())
  email              String               @unique
  first_name         String?
  last_name          String?
  gender             String?
  profile_image_url  String?
  user_id            String               @unique
  subscription       String?
  user_portfolio     user_portfolio[]
  crypto_transaction crypto_transaction[]
}

model payments {
  id               Int      @id @default(autoincrement())
  created_time     DateTime @default(now())
  stripe_id        String
  email            String
  amount           String
  payment_time     String
  payment_date     String
  currency         String
  user_id          String
  customer_details String
  payment_intent   String
}

model subscriptions {
  id                        Int      @id @default(autoincrement())
  created_time              DateTime @default(now())
  subscription_id           String
  stripe_user_id            String
  status                    String
  start_date                String
  end_date                  String?
  plan_id                   String
  default_payment_method_id String?
  email                     String
  user_id                   String
}

model subscriptions_plans {
  id           Int      @id @default(autoincrement())
  created_time DateTime @default(now())
  plan_id      String
  name         String
  description  String
  amount       String
  currency     String
  interval     String
}

model invoices {
  id              Int      @id @default(autoincrement())
  created_time    DateTime @default(now())
  invoice_id      String
  subscription_id String
  amount_paid     String
  amount_due      String?
  currency        String
  status          String
  email           String
  user_id         String?
}

enum PortfolioType {
  SPOT
  MARGIN
}

enum TransactionType {
  BUY
  SELL
  TRANSFER_TO_MARGIN
  TRANSFER_FROM_MARGIN
  MARGIN_BUY
  MARGIN_SELL
}

model user_portfolio {
  id           Int           @id @default(autoincrement())
  created_time DateTime      @default(now())
  user_id      String
  name         String
  description  String?
  type         PortfolioType
  is_active    Boolean       @default(true)

  user         user                 @relation(fields: [user_id], references: [user_id])
  transactions crypto_transaction[]
  balances     portfolio_balance[]

  @@unique([user_id, name])
  @@index([user_id])
}

model crypto_transaction {
  id               Int             @id @default(autoincrement())
  created_time     DateTime        @default(now())
  transaction_time DateTime
  portfolio_id     Int
  user_id          String
  coin_name        String
  coin_ticker      String
  amount           Float
  price_usd        Float
  total_usd        Float
  type             TransactionType
  notes            String?

  portfolio user_portfolio @relation(fields: [portfolio_id], references: [id])
  user      user           @relation(fields: [user_id], references: [user_id])

  @@index([portfolio_id, coin_ticker])
  @@index([user_id])
  @@index([transaction_time])
}

model portfolio_balance {
  id           Int      @id @default(autoincrement())
  last_updated DateTime @default(now())
  portfolio_id Int
  coin_ticker  String
  amount       Float

  portfolio user_portfolio @relation(fields: [portfolio_id], references: [id])

  @@unique([portfolio_id, coin_ticker])
  @@index([portfolio_id])
}
